version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: helios_rabbitmq
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_conf:/etc/rabbitmq
    env_file:
      - helios-rabbitmq.env
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 20s
      retries: 5
#    networks:
#      - helios_net

  postgres:
    image: postgres:14-alpine
    container_name: helios_db
    env_file:
      - helios-postgres.env
    restart: unless-stopped
    volumes:
      - helios_db:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
#    networks:
#      - helios_net
    ports:
      - 127.0.0.1:5432:5432

  web:
    #image: python:3.6-alpine
    container_name: helios
    env_file:
      helios.env
    build:
      dockerfile: Dockerfile
    command: 'python -u manage.py runserver 0.0.0.0:8000'
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.services.guac.loadbalancer.server.port=8000
      - traefik.http.routers.guac.rule=Host(`${SERVER_URL}`)
      - traefik.http.routers.guac.tls.certresolver=letsencrypt
      - traefik.frontend.entryPoints=http,https
    restart: unless-stopped
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    #networks:
    #  - helios_net
      #- proxy_net
    depends_on:
      postgres:
        condition: service_healthy

#networks:
#  helios_net:
#    driver: bridge
  #proxy_net:
  #  external: true

volumes:
  helios_db:
  rabbitmq_data:
  rabbitmq_conf:


